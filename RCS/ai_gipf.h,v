head	1.8;
access;
symbols
	version_1_03:1.8
	version_1_02:1.8
	version_1_01:1.8
	version_1_0_1:1.8
	version_1_0:1.6
	version_0_99_5:1.3
	version_0_99_4:1.2;
locks; strict;
comment	@ * @;


1.8
date	99.07.11.15.53.34;	author kurt;	state Exp;
branches;
next	1.7;

1.7
date	99.06.27.08.57.55;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	99.06.01.16.59.11;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	99.05.30.10.27.58;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	99.05.29.11.15.51;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	99.05.19.16.49.02;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	99.03.22.19.42.41;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	99.01.07.17.04.53;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@I think I now removed all references to linklist.
All lists are now made with vectors from STL.
@
text
@/*
** $Id: ai_gipf.h,v 1.7 1999/06/27 08:57:55 kurt Exp kurt $
**
** subclass of ai_player for a computer GIPF player
*/
/*
**    Copyright (C) 1998 Kurt Van den Branden
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  
*/

#include <vector>
#include <deque>
#include "ai_player.h"
#include "board.h"

class ai_gipf : public ai_player {
 private:
    char colour;
    int game;
    int remoppgipf;
    int maxgipf;
    int randomfirstmove;
    vector<basemove *> * movelist;

    int evalfunc (void * game, int maxplayer);
    void listfunc (void * game, vector<basemove *> &);
    void * newfunc (void * game, basemove * move, int * finished,
		    int * depthdelta, int * nodetype);
#if 0
    void * copymovefunc (void * move);
    void delmovefunc (void * move);
#endif
    void delgamefunc (void * game);
    int stopfunc (void);

    void cleanupmovelist (vector<basemove *> * mlist);
    
 public:
    ai_gipf (char playercolour, int gametype);
    ~ai_gipf ();

    void game_move (board * oboard, float timeleft,
		    char * type, char * from, char * to);
    char game_gipf (board * oboard, float timeleft, char * pos);
    char game_row (board * oboard, float timeleft, char * start, char * end);
};


enum { // value for the type-field in gipf_move
    G_MOVE,
    G_REMGIPF,
    G_REMROW
};


class gipf_move : public basemove {
 private:
 public:
    gipf_move () {};
    ~gipf_move ();

    virtual basemove * copy ()   ;

    int type;              // G_MOVE, G_REMGIPF or G_REMROW

//    union {
	struct {
	    int nr;
	} piece;
	struct {
	    char from[3];
	    char to[3];
	    char owner;
	} remrow;
	struct {
	    vector<char *> gipflist;
//	    listheader * gipflist; // (items are char-strings)
	    char owner;
	} remgipf;
//    };
};


/*
** C-functions for calling from the main program
*/
extern "C" {
void * ai_gipf_new (char colour, int game);
void ai_gipf_move (board * oboard, void * self, float timeleft, 
		 char * type, char * from, char * to);
char ai_gipf_gipf (board * oboard, void * self, float timeleft, char * pos);
char ai_gipf_row (board * oboard, void * self, float timeleft,
		  char * start, char * end);
void ai_gipf_end (void * self);
}
@


1.7
log
@replaced the linklist of possible moves with an STL vector
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.6 1999/06/01 16:59:11 kurt Exp kurt $
d25 1
d35 2
a36 1
    listheader * movelist;
d49 1
a49 1
    void cleanupmovelist (listheader * mlist);
d69 1
a69 1
class gipf_move: public basemove {
a72 2
//    gipf_move (gipf_move &); // copy constructor necessary

d75 1
a75 1
    basemove * copy ();
d79 1
a79 1
    union {
d89 2
a90 1
	    listheader * gipflist; // (items are char-strings)
d93 1
a93 1
    };
@


1.6
log
@updates for correct handling of timed games by the computerplayer
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.5 1999/05/30 10:27:58 kurt Exp kurt $
d24 1
d37 2
a38 2
    listheader * listfunc (void * game);
    void * newfunc (void * game, void * move, int * finished,
d40 1
d43 1
d66 11
a76 1
typedef struct {
d93 2
a94 1
} gipf_move;
@


1.5
log
@WORKS !
but looks to be somewhat slower than the original version
(even using the mtdf algorithm)
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.4 1999/05/29 11:15:51 kurt Exp kurt $
d50 4
a53 3
    void game_move (board * oboard, char * type, char * from, char * to);
    char game_gipf (board * oboard, char * pos);
    char game_row (board * oboard, char * start, char * end);
d87 1
a87 1
void ai_gipf_move (board * oboard, void * self, 
d89 3
a91 2
char ai_gipf_gipf (board * oboard, void * self, char * pos);
char ai_gipf_row (board * oboard, void * self, char * start, char * end);
@


1.4
log
@almost correct.

still problems when the memory depth is lower then the maximum search depth
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.3 1999/05/19 16:49:02 kurt Exp kurt $
d64 15
a78 4
    char from[3];          // G_MOVE and G_REMROW
    char to[3];            // G_MOVE and G_REMROW
    char piecetype;        // G_MOVE, G_REMGIPF or G_REMROW
    listheader * gipflist; // G_REMGIPF  (items are char-strings)
@


1.3
log
@more changes, still not finished.
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.2 1999/03/22 19:42:41 kurt Exp kurt $
d41 1
a41 1
    void delgamefunc (void * game) { board * b = (board *) game; b_del (b); };
@


1.2
log
@create functions for calling the ai_gipf-player from GF1
@
text
@d2 1
a2 1
** $Id: ai_gipf.h,v 1.1 1999/01/07 17:04:53 kurt Exp kurt $
d43 2
d49 4
d66 1
a66 1
    char piecetype;        // G_MOVE
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** $Id$
d25 1
d34 8
a41 29
    
    inline int evalfunc (void * game, int maxplayer);
                 // pointer to the evaluation function
                 // to be used when the maximum search-depth
                 // has been reached, or the game is finished
                 // (returns a value between -1000 and 1000)
    inline listheader * listfunc (void * game);
                 // pointer to the function that produces a
                 // list of possible moves starting from
                 // the current game-position
    inline void * newfunc (void * game, void * move, int * finished,
		    int * depthdelta, int * changetype);
                 // pointer to the function that produces
                 // a new game-position starting from the
                 // the current position and a move
                 // the third parameter is a flag to show
                 // if the game is finished.
                 // (also signals a change in searchdepth and
                 //  a change in nodetype => MIN or MAX)
                 // (the function must return NULL if the move is invalid)
    inline void * copymovefunc (void * move);
                 // pointer to a function for copying an item
                 // from the list as produced by 'listfunc'
    inline void delmovefunc (void * move);
                 // pointer to a function for removing an item
                 // from the list as produced by 'listfunc'
    inline void delgamefunc (void * game);
                 // pointer to a function for removing a
                 // a game-position as returned by 'newfunc'
d45 1
a45 1
    ai_gipf (char playercolour);
d47 2
d50 4
a53 1
    void gametype (int t) { game = t; };
d56 19
@
