head	1.8;
access;
symbols
	version_1_03:1.8
	version_1_02:1.8
	version_1_01:1.8
	version_1_0_1:1.8
	version_1_0:1.8
	version_0_99_5:1.8
	version_0_99_4:1.8
	version_0_99_3:1.8
	version_0_99_2:1.8
	version_0_99_1:1.7;
locks; strict;
comment	@// @;


1.8
date	98.11.01.16.30.53;	author kurt;	state Exp;
branches;
next	1.7;

1.7
date	98.10.11.19.06.03;	author kurt;	state Exp;
branches;
next	1.6;

1.6
date	98.09.25.15.29.25;	author kurt;	state Exp;
branches;
next	1.5;

1.5
date	98.09.25.15.27.44;	author kurt;	state Exp;
branches;
next	1.4;

1.4
date	98.09.25.12.26.30;	author kurt;	state Exp;
branches;
next	1.3;

1.3
date	98.09.20.14.18.44;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	98.09.19.12.52.51;	author kurt;	state Exp;
branches;
next	1.1;

1.1
date	98.09.19.12.36.43;	author kurt;	state Exp;
branches;
next	;


desc
@@


1.8
log
@added copyright
@
text
@/*
** $Id: fl_pile.cxx,v 1.7 1998/10/11 19:06:03 kurt Exp kurt $
**
** all that is necessary for drawing a pile of pieces
*/
/*
**    Copyright (C) 1998 Kurt Van den Branden
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
** 
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
** 
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  
*/

#include <FL/fl_draw.H>
#include "fl_pile.h"

#ifndef min
#define min(x,y)       (x < y ? x : y)
#endif

#ifndef max
#define max(x,y)       (x > y ? x : y)
#endif

#define round(x)       (int)(x + 0.5)


/*
** constructor
*/
fl_pile::fl_pile(int X,int Y,int W,int H,const char *l) 
    : Fl_Widget (X, Y, W, H, l) 
{
    nrpieces = 0;
    color = 'o';

    calcsizes ();

    // I don't know if this is a good solution
//    lyellow = FL_COLOR_CUBE + 
//	FL_RED_MULTIPLY * 4 +
//	FL_GREEN_MULTIPLY * 7 +
//	FL_BLUE_MULTIPLY * 3;
    lyellow = fl_color_cube(255 * FL_NUM_RED/256,
			    255 * FL_NUM_GREEN/256,
			    200 * FL_NUM_BLUE/256);

    return;
}


/*
** destructor
*/
fl_pile::~fl_pile ()
{
    return;
}


/*
** I don't think I have to handle anything here
*/
int fl_pile::handle (int event)
{
    switch (event)
    {
    default:
	return (0);
    }
}


void fl_pile::draw ()
{
    int i,
	x1, y1;

    /* set everything to background color */
    fl_color (Fl_Widget::color());
    fl_rectf (x()+1, y()+1, w()-2, h()-2);

    draw_box ();

    if (color == 'o')
	fl_color (lyellow); // yellow
    else
	fl_color (FL_BLACK); // black

    for (i = 1; i <= nrpieces; i++)
    {
	x1 = xoffset;
	y1 = yoffset - round (i * pieceh * 1.5);

	fl_rectf (x1, y1, piecew, pieceh);
    }

    fl_color (FL_BLACK);
    for (i = 1; i <= nrpieces; i++)
    {
	x1 = xoffset;
	y1 = yoffset - round (i * pieceh * 1.5);

	fl_rect (x1, y1, piecew, pieceh);
    }

    return;
}


void fl_pile::resize (int x, int y, int w, int h)
{
    Fl_Widget::resize (x, y, w, h); 

    calcsizes ();

    return;
}


/*
** calculate 
**    xoffset
**    yoffset
**    piecew
**    pieceh
**
** to be used at every resize-event and at class-creation
*/
void fl_pile::calcsizes ()
{
    int height,
	width;

    width = round (w() / 1.5);
    height = round (h() / 5.5);
    piecew = min (width, height);
    pieceh = (int) (piecew / 5.0);

    xoffset = round((w() - piecew) / 2) + x();
    yoffset = h() + y();

    return;
}


void fl_pile::setvalue (int val)
{
    nrpieces = val;
    redraw ();

    return;
}


void fl_pile::setcolor (char col)
{
    color = col;
    redraw ();

    return;
}

@


1.7
log
@changes to adapt to fltk-19981006
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.6 1998/09/25 15:29:25 kurt Exp kurt $
d5 17
@


1.6
log
@can you say "STUPID BUG"
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.5 1998/09/25 15:27:44 kurt Exp kurt $
d33 7
a39 4
    lyellow = FL_COLOR_CUBE + 
	FL_RED_MULTIPLY * 4 +
	FL_GREEN_MULTIPLY * 7 +
	FL_BLUE_MULTIPLY * 3;
@


1.5
log
@small change to the include-files
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.4 1998/09/25 12:26:30 kurt Exp kurt $
a28 1
    attention = 0;
@


1.4
log
@changed all the calls to fl_color.
don't use rgb, but choose a color from the predefined color table
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.3 1998/09/20 14:18:44 kurt Exp kurt $
d7 1
a7 1
#include "FL/fl_draw.H"
d29 1
d154 1
@


1.3
log
@changed draw so it resets everything to background color before drawing the
pieces.
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.2 1998/09/19 12:52:51 kurt Exp kurt $
d32 6
d76 1
a76 1
	fl_color (255, 255, 200); // yellow
d78 1
a78 1
	fl_color (0, 0, 0); // black
d88 1
a88 1
    fl_color (0, 0, 0);
@


1.2
log
@finished writing the fl_pile class
also done some light testing on the drawing-routines, looks ok
@
text
@d2 1
a2 1
** $Id: fl_pile.cxx,v 1.1 1998/09/19 12:36:43 kurt Exp kurt $
d61 5
a65 1
	x, y;
d76 2
a77 2
	x = xoffset;
	y = yoffset - round (i * pieceh * 1.5);
d79 1
a79 1
	fl_rectf (x, y, piecew, pieceh);
d85 2
a86 2
	x = xoffset;
	y = yoffset - round (i * pieceh * 1.5);
d88 1
a88 1
	fl_rect (x, y, piecew, pieceh);
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
** $Id$
d27 1
a27 1
    nrpieces = 5;
d66 1
a66 1
	fl_color (255, 255, 255); // yellow
d115 1
a115 1
    width = round (w() / 2.0);
d118 1
a118 1
    pieceh = round (piecew / 5.0);
@
